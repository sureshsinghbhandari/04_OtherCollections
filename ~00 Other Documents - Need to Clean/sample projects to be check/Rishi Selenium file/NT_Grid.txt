
import com.googlecode.fightinglayoutbugs.DetectInvalidImageUrls;
import com.googlecode.fightinglayoutbugs.FightingLayoutBugs;
import com.googlecode.fightinglayoutbugs.LayoutBug;
import com.googlecode.fightinglayoutbugs.LayoutBugDetector;
import com.googlecode.fightinglayoutbugs.WebPage;
import com.thoughtworks.selenium.*;
import org.testng.annotations.*;

import static org.openqa.grid.common.RegistrationRequest.MAX_INSTANCES;
import static org.testng.Assert.*;
import java.net.MalformedURLException; 
import java.net.URL; 
import java.util.Collection;
import java.util.concurrent.TimeUnit;
import java.util.regex.Pattern;
import org.openqa.selenium.remote.DesiredCapabilities; 
import org.openqa.selenium.remote.RemoteWebDriver; 
import org.testng.annotations.*; 
import org.apache.commons.io.FileUtils;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.remote.Augmenter;
import org.openqa.selenium.OutputType;
import org.openqa.selenium.TakesScreenshot;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverBackedSelenium;
import java.awt.Robot;
import java.io.File;
import java.io.IOException;

import jxl.*; 
import java.io.*;


@SuppressWarnings({ "unused", "deprecation" })
public class Reg_NT_Accounts extends SeleneseTestCase{
    
	private static WebDriver driver;
	int i = 1; //Counter for Screen shot
	
	static DesiredCapabilities capability=new DesiredCapabilities(); 
	@Parameters({"browser"}) 
    
	@BeforeClass
	    
	public void setup(String browser) throws Exception { 
		
		if(browser.equalsIgnoreCase("firefox")){ 
            
			System.out.println("firefox"); 
			            
			capability= DesiredCapabilities.firefox(); 
			            
			capability.setBrowserName("firefox");  
			            
			capability.setPlatform(org.openqa.selenium.Platform.ANY); 
			            
			//capability.setVersion(""); 

			} 
			     
			      
			if(browser.equalsIgnoreCase("chrome")){ 
			            
			System.out.println("chrome"); 
			            
			capability= DesiredCapabilities.chrome(); 
			            
			capability.setBrowserName("chrome");  

			capability.setCapability(MAX_INSTANCES, 5);
			            
			capability.setPlatform(org.openqa.selenium.Platform.ANY); 
			            
			//capability.setVersion(""); 
			       
			}
		  
			String baseUrl = "";
			driver = new RemoteWebDriver(new URL("http://localhost:4444/wd/hub"), capability); 
			selenium = new WebDriverBackedSelenium(driver, baseUrl);
			driver.get(baseUrl);
			selenium.waitForPageToLoad("90000");	
			qspCreateLogFile();
			screenCaptureFF();
		
	}  
    
   
public void setUp() throws Exception {
    
    //Starting code block of AutoIT call
    //Runtime rt=Runtime.getRuntime();	
    //rt.exec("C:\\Program Files\\AutoIt3\\Examples\\NBKIE.exe");
    //rt.exec("C:\\Program Files\\AutoIt3\\Examples\\NBKFF.exe");	 
    //Ending code block of AutoIT call
    
    //Function Call to open the URL in the specified browser
    //Function calls to maximize and keep the focus on the browser
    selenium.windowMaximize();
    selenium.windowFocus();
	
	//Function call to create the result file
	qspCreateLogFile();
		 	
	//selenium.setTimeout("600000");
	//selenium.open("/login/sign-in/signOnScreen.go");
	selenium.waitForPageToLoad("90000");	
	}

//Function definition to create the data array in memory. Here the data sheet path, sheet name, and table beginning point name has to be updated     
    @DataProvider(name = "DP1")
    
public Object[][] createData1() throws Exception{
		
    	Object[][] retObjArr=getTableArray("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\DataProvider_Grid.xls","Regression_NT_Cust_Service","RegressionTestData1");
		return(retObjArr);				   
    }

    //Function definition drive the test    
    @Test (dataProvider = "DP1")
   
public void testRegression(String property, String xPath, String value, String comparisonText, String permission, String name, String applicable, String script) throws Exception{
	
	if(script!=null)
		System.out.println(script);
    
	if(property.equals("wait"))
	{
		Thread.sleep(10000);
		}
	
	
	//Code to check the pagetitle	
    if(property.equals("pagetitle"))
		{
    		qspWriteHeading(selenium.getTitle());
    			if(applicable.equals("yes"))
    		qspWriteDesignStep("Step6: Page Title is applicable");
    			if(selenium.getTitle().equals(comparisonText)){
			qspWritePassLog(comparisonText+" Page is Displaying the title correctly");
			}
			else 
			{
			qspWriteFailLog(comparisonText+"Page is not Displaying the title correctly");
    		}
    		
		}
	
    //Code to check the textboxes 
	if(property.equals("textbox"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step20: Text Box Verification is applicable");
			if(selenium.isEditable(xPath)==true){
				qspWritePassLog("The textbox \""+name+"\" is enabled");
				selenium.type(xPath, value);
			}
			else
				qspWriteFailLog("The textbox \""+name+"\" is disabled");
		}	
	
	//Code to test the checkboxes
	if(property.equals("checkbox"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step18: Checkbox Verification is applicable");
			//assertEquals(value,selenium.getValue(xPath));
			selenium.click(xPath);
			assertEquals(value,selenium.getValue(xPath));	
			String cValue = new String();
			cValue = selenium.getValue(xPath);


			if(cValue.equals("on"))
				qspWritePassLog("The state of checkbox \"" +name+ "\" is "+cValue);
			else
				qspWriteFailLog("The state of checkbox \"" +name+ "\" is "+cValue);
		}
	
		/////////////////////////////////////////////////
		
	//Code to check and uncheck check boxes and validate their visibility	
	if(property.equals("checkbox1"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step24: Check box Verification is applicable");
			//assertEquals(value,selenium.getValue(xPath));
			selenium.click(xPath);
			assertEquals(value,selenium.getValue(xPath));	
			String cValue = new String();
			cValue = selenium.getValue(xPath);


			if(cValue.equals("off"))
				qspWritePassLog("The state of checkbox \"" +name+ "\" is "+cValue);
			else
				qspWriteFailLog("The state of checkbox \"" +name+ "\" is "+cValue);
		}
		
		
		
		/////////////////////////////////////////////
	
	//Code to validate radio buttons
	if(property.equals("radio"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step16: Radio Button Verification is applicable");
			selenium.click(xPath);
			assertEquals(value,selenium.getValue(xPath));	
			String cValue1 = new String();
			cValue1 = selenium.getValue(xPath);

			if(cValue1.equals("on"))
				qspWritePassLog("The radio button \""+name+"\" is clicked and the state of Radio button is "+cValue1);
			else
				qspWriteFailLog("The state of Radio \""+name+"\" is "+cValue1);
		}
	
	//Code to validate dropdown list boxes
	if(property.equals("dropdown"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step22: Drop Down Verification is applicable");
			String[] dropdownoutput=selenium.getSelectOptions(xPath);
			for (int i=1; i<dropdownoutput.length; i++)
			{
			System.out.println("The dropdown list contains the following list:  "+dropdownoutput[i]);
			}
			selenium.select(xPath, value);
		}
	
		
		/////////////
	
	//Code to validate the elements present in the list
	if(property.equals("dropdown1"))
		{
			String[] dropdownoutput=selenium.getSelectOptions(xPath);
			for (int i=1; i<dropdownoutput.length; i++)
			{
			System.out.println("The dropdown list contains the following list:  "+dropdownoutput[i]);
			}
		}
		
	//Code to validate text area	
	if(property.equals("textarea"))
		{
			selenium.type(xPath, value);
		}
	
	//Code to validate images present in a page
	if(property.equals("image"))
		
	{
		if(permission.equals("alttag"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step12: Alt tag for images is applicable");
			String getImageTitle=selenium.getAttribute(xPath);
			System.out.println("Image title is "+getImageTitle);

			if (getImageTitle.equals(comparisonText))
			{
				
				qspWritePassLog("Alt tag for image is displaying as: "+ comparisonText);
				
			}
				else 
			{
				qspWriteFailLog("Alt tag for image is not being displayed properly");
			
			}
		}
	}  
	//Code to validate and navigate using links
	if(property.equals("link"))
			
		{
			if(permission.equals("click"))
			{
				selenium.click(xPath);
				selenium.waitForPageToLoad("90000");
				screenCaptureFF();
			}
			if(permission.equals("titletag"))
			{
				if(applicable.equals("yes"))
					qspWriteDesignStep("Step7: Title tag for links is applicable");
				String getElementTitle=selenium.getAttribute(xPath);

				if (getElementTitle.equals(comparisonText))
				{
					
					qspWritePassLog("Title tag for link \""+name+ "\" is displaying as: "+ comparisonText);
					
				}
					else 
				{
					qspWriteFailLog("Title tag for \""+name+"\" link is not being displayed properly");
				
				}
			}
		}	
	
	//Code to validate in page targeted links
	if(property.equals("link1"))
				
			{
				if(permission.equals("click"))
				{
					selenium.click(xPath);
					//selenium.waitForPageToLoad("60000");
					  screenCaptureFF();
				}
			}		
			
	
	//Code to test headers of the page	
	if(property.equals("header"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step5: Header and Footer are applicable");
			if(selenium.isElementPresent(xPath)==true){
				qspWritePassLog("Header \""+name+"\" is present");
			}
			else{
				qspWriteFailLog("Header \""+name+"\" is not present");
			}
			
		}
	
	//Code to test footers of the page
	if(property.equals("footer"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Step5: Header and Footer are applicable");
			if(selenium.isElementPresent(xPath)==true){
				qspWritePassLog("Footer \""+name+"\" is present");
			}
			else{
				qspWriteFailLog("Footer \""+name+"\" is not present");
			}
		}
	
	//Code to validate print options
	if(property.equals("linkprint"))
		{
			if(permission.equals("click"))
			{
				selenium.click(xPath);
				selenium.waitForPopUp("printwindow_", "60000");
				selenium.selectWindow("name=printwindow_");
				if(selenium.getTitle().equals(comparisonText)){
					qspWritePassLog(comparisonText+" Pop window is displaying");
				}
				else 
				{
					qspWriteFailLog(comparisonText+"Pop window is not Displaying");
				}
				selenium.close();
				selenium.selectWindow("null");
			}
    
		}
    
	//Code to validate text in the page
	if(property.equals("text"))
		{
			if(applicable.equals("yes"))
				qspWriteDesignStep("Sub page is applicable");
			if(selenium.isTextPresent(value)==true){
				qspWritePassLog("The Text: "+value+" is present");
			}
			else{
				qspWriteFailLog("The Text: "+value+" is not present");	
			}
			
		}		
	
	if(property.equals("layout"))
	{
		BufferedWriter f = new BufferedWriter(new FileWriter("D:\\New Folder\\layoutresults.csv"));
		FightingLayoutBugs flb = new FightingLayoutBugs();
		flb.setScreenshotDir(new File("D:\\New Folder"));
		WebPage webPage = new WebPage(driver); 
		final Collection<LayoutBug> layoutBugs = flb.findLayoutBugsIn(webPage); 
		f.write("Found " + layoutBugs.size() + " layout bug.");
		f.newLine();
		//System.out.println("Found " + layoutBugs.size() + " layout bug(s).");   
		for (LayoutBug bug : layoutBugs)
		{             
			f.newLine();
			f.write(""+bug);
		    f.newLine();
			//System.out.println(bug);        
		}
		f.flush();
		f.close();
	}
	
	 if(property.equals("wait"))
	    {
	    	Thread.sleep(10000);
	    }   
    
    }
    
   
 

	//Function definition to end the test and free up the memory
    @AfterClass
    public void tearDown() throws Exception{
    	qspCompleteLogFile();
        //selenium.close();
        selenium.stop();

    } 
    
    //Function definition to fetch the data from excel sheet and provide it to the create data function
    public String[][] getTableArray(String xlFilePath, String sheetName, String tableName) throws Exception{
        String[][] tabArray=null;
        
            Workbook workbook = Workbook.getWorkbook(new File(xlFilePath));
            Sheet sheet = workbook.getSheet(sheetName); 
            int startRow,startCol, endRow, endCol,ci,cj;
            Cell tableStart=sheet.findCell(tableName);
            startRow=tableStart.getRow();
            startCol=tableStart.getColumn();

            Cell tableEnd= sheet.findCell(tableName, startCol+1,startRow+1, 100, 64000,  false);                

            endRow=tableEnd.getRow();
            endCol=tableEnd.getColumn();
            System.out.println("startRow="+startRow+", endRow="+endRow+", " + "startCol="+startCol+", endCol="+endCol);
            tabArray=new String[endRow-startRow-1][endCol-startCol-1];
            ci=0;

            for (int i=startRow+1;i<endRow;i++,ci++){
                cj=0;
                for (int j=startCol+1;j<endCol;j++,cj++){
                    tabArray[ci][cj]=sheet.getCell(j,i).getContents();
                }
            }
        

        return(tabArray);
    }
    
    //Function Definition for capturing screenshot.
    
	public void screenCaptureFF()
	{
		driver = new Augmenter().augment(driver);		
	 File screenshot = ((TakesScreenshot)driver).
     getScreenshotAs(OutputType.FILE);
     try {
          FileUtils.copyFile(screenshot, new File("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\Screenshots\\screenshot "+i+".png "));
         } catch (IOException e) {
                                  //TODO Auto-generated catch block
                                  e.printStackTrace();
                                 }
    	 i++;
    	 if (screenshot!=null)
    	 {
    		 System.out.println("Screenshot "+i+" taken");
    	 }
    	 else System.out.println("Screenshot not taken");
    }
     
    //Function definition to create the result file
    public void qspCreateLogFile() throws Exception{        

    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm"));
    	b.write("<html><head><title>"+"Transparent Business Report"+"</title></head>");   
    	b.write("<body><table border='1'><tr bgcolor='#A2B5CD'><td>Currently Executing:</td><td>"+"Transparent_Business"+"</td></tr></table>");      
    	b.write("<table border='1'><tr bgcolor='#A2B5CD'><td><b>Description</b></td><td><b>Result</b></td></tr>");
    	b.close();

    }
    
    //Function definition to write the heading in the result file
    public void qspWriteHeading(String desc) throws Exception{

    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm",true));
    	b.write("<tr bgcolor='#AFEEEE'><td><b>Page: "+desc+"</b></td></tr>");
    	b.close();
    }
    
    //Function definition to write the design steps in the result file
    public void qspWriteDesignStep(String desc) throws Exception{

    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm",true));
    	b.write("<tr bgcolor='#E0EEEE'><td><b>"+desc+"</b></td></tr>");
    	b.close();
    }

    //Function definition to write the pass results in the result file
    public void qspWritePassLog(String desc) throws Exception{

    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm",true));
    	b.write("<tr><td>"+desc+"</td><td bgcolor='#00FF00'>PASS</td></tr>");
    	b.close();
    }

    //Function definition to write the fail results in the result file
    public void qspWriteFailLog(String desc) throws Exception{
    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm",true));
    	b.write("<tr><td>"+desc+"</td><td bgcolor='#FF0000'>Fail</td></tr>");
    	b.close();
    }   
    
    //Function definition to complete the result file
    public void qspCompleteLogFile() throws Exception{
    	BufferedWriter b = new BufferedWriter(new FileWriter("D:\\Documents and Settings\\maruthi.habib\\My Documents\\Sel_2.24_Demo\\Sel_2.24_Demo\\test-output\\"+"NT_Accounts"+".htm",true));
    	b.write("</html>");
    	b.close();
    }
}//end of class


